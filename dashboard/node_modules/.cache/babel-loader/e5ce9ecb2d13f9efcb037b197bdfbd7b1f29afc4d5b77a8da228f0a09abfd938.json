{"ast":null,"code":"import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async provider => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// Process compliance results to include NIST 800-53 mappings\nconst processKsiResults = ksis => {\n  // Transform KSI data to include NIST control mappings\n  const nistControlStatus = {};\n\n  // First, initialize all NIST controls with \"not-implemented\" status\n  Object.values(ksiToControlsMap).flat().forEach(controlId => {\n    if (!nistControlStatus[controlId]) {\n      nistControlStatus[controlId] = {\n        id: controlId,\n        title: `${controlId} Control`,\n        status: \"not-implemented\",\n        mappedKsis: [],\n        evidence: []\n      };\n    }\n  });\n\n  // Now process each KSI and update related NIST controls\n  ksis.forEach(ksi => {\n    const ksiId = ksi.ksi_id;\n    const controls = getNistControlsForKsi(ksiId);\n\n    // Update each related NIST control\n    controls.forEach(controlId => {\n      var _ksiDefinitions$ksiId;\n      // If a KSI is implemented, mark the NIST control as at least partial\n      if (ksi.status === \"implemented\" && nistControlStatus[controlId].status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"partial\";\n      }\n\n      // If any KSI is not implemented, the NIST control can't be fully implemented\n      if (ksi.status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"not-implemented\";\n      }\n\n      // Add KSI to the mapping list for this control\n      nistControlStatus[controlId].mappedKsis.push({\n        id: ksiId,\n        title: ((_ksiDefinitions$ksiId = ksiDefinitions[ksiId]) === null || _ksiDefinitions$ksiId === void 0 ? void 0 : _ksiDefinitions$ksiId.title) || ksiId,\n        status: ksi.status\n      });\n\n      // Add evidence from KSI\n      if (ksi.evidence && ksi.evidence.length > 0) {\n        nistControlStatus[controlId].evidence.push(...ksi.evidence.map(item => `${ksiId}: ${item}`));\n      }\n    });\n  });\n\n  // Check if all mapped KSIs for a control are implemented\n  Object.values(nistControlStatus).forEach(control => {\n    if (control.mappedKsis.every(ksi => ksi.status === \"implemented\")) {\n      control.status = \"implemented\";\n    }\n  });\n  return {\n    ksis: ksis,\n    nistControls: Object.values(nistControlStatus)\n  };\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  const mockData = {\n    aws: {\n      compliant: 15,\n      nonCompliant: 3,\n      notApplicable: 2,\n      controls: [{\n        ksi_id: \"KSI-001\",\n        title: \"FIPS-validated encryption enabled\",\n        status: \"implemented\",\n        evidence: [\"KMS keys are properly configured\", \"S3 buckets use encryption\"]\n      }, {\n        ksi_id: \"KSI-002\",\n        title: \"MFA enabled for all users\",\n        status: \"implemented\",\n        evidence: [\"All IAM users have MFA enabled\"]\n      }, {\n        ksi_id: \"KSI-003\",\n        title: \"TLS 1.3 enforced on external endpoints\",\n        status: \"implemented\",\n        evidence: [\"Load balancers enforce TLS 1.3\"]\n      }, {\n        ksi_id: \"KSI-004\",\n        title: \"Encryption at rest\",\n        status: \"implemented\",\n        evidence: [\"All EBS volumes are encrypted\"]\n      }, {\n        ksi_id: \"KSI-005\",\n        title: \"IAM keys rotated within 90 days\",\n        status: \"partial\",\n        evidence: [\"Some keys exceed 90 days\"]\n      }, {\n        ksi_id: \"KSI-006\",\n        title: \"No open security groups\",\n        status: \"implemented\",\n        evidence: [\"All security groups properly configured\"]\n      }, {\n        ksi_id: \"KSI-007\",\n        title: \"Only approved AMIs used\",\n        status: \"implemented\",\n        evidence: [\"All instances use approved AMIs\"]\n      }, {\n        ksi_id: \"KSI-008\",\n        title: \"Logging enabled\",\n        status: \"implemented\",\n        evidence: [\"CloudTrail enabled in all regions\"]\n      }, {\n        ksi_id: \"KSI-009\",\n        title: \"Backups scheduled and encrypted\",\n        status: \"implemented\",\n        evidence: [\"All backups encrypted and scheduled\"]\n      }, {\n        ksi_id: \"KSI-010\",\n        title: \"Root account protected\",\n        status: \"implemented\",\n        evidence: [\"Root account has MFA enabled\"]\n      }, {\n        ksi_id: \"KSI-011\",\n        title: \"Containers don't run as root\",\n        status: \"not-implemented\",\n        evidence: [\"Some containers run as root\"]\n      }, {\n        ksi_id: \"KSI-012\",\n        title: \"EBS volumes encrypted by default\",\n        status: \"implemented\",\n        evidence: [\"Account settings enforce encryption\"]\n      }, {\n        ksi_id: \"KSI-013\",\n        title: \"Ports restricted to minimum\",\n        status: \"partial\",\n        evidence: [\"Some non-essential ports open\"]\n      }, {\n        ksi_id: \"KSI-014\",\n        title: \"User accounts use SSO\",\n        status: \"implemented\",\n        evidence: [\"SSO implemented with Active Directory\"]\n      }, {\n        ksi_id: \"KSI-015\",\n        title: \"OS hardening applied\",\n        status: \"implemented\",\n        evidence: [\"AMI hardening via automation\"]\n      }]\n    },\n    azure: {\n      compliant: 14,\n      nonCompliant: 4,\n      notApplicable: 2,\n      controls: [{\n        ksi_id: \"KSI-001\",\n        title: \"FIPS-validated encryption enabled\",\n        status: \"implemented\",\n        evidence: [\"Storage accounts use FIPS encryption\"]\n      }, {\n        ksi_id: \"KSI-002\",\n        title: \"MFA enabled for all users\",\n        status: \"implemented\",\n        evidence: [\"MFA enforced via Conditional Access\"]\n      }, {\n        ksi_id: \"KSI-003\",\n        title: \"TLS 1.3 enforced on external endpoints\",\n        status: \"not-implemented\",\n        evidence: [\"Still using TLS 1.2 on some endpoints\"]\n      }, {\n        ksi_id: \"KSI-004\",\n        title: \"Encryption at rest\",\n        status: \"implemented\",\n        evidence: [\"Storage accounts and disks are encrypted\"]\n      }, {\n        ksi_id: \"KSI-005\",\n        title: \"Key rotation policy\",\n        status: \"implemented\",\n        evidence: [\"Key vault rotation policies in place\"]\n      }, {\n        ksi_id: \"KSI-006\",\n        title: \"No open NSGs\",\n        status: \"implemented\",\n        evidence: [\"NSGs properly restricted\"]\n      }, {\n        ksi_id: \"KSI-007\",\n        title: \"Only approved images used\",\n        status: \"implemented\",\n        evidence: [\"All VMs use approved images\"]\n      }, {\n        ksi_id: \"KSI-008\",\n        title: \"Logging enabled\",\n        status: \"implemented\",\n        evidence: [\"Azure Monitor logs enabled\"]\n      }, {\n        ksi_id: \"KSI-009\",\n        title: \"Backups scheduled and encrypted\",\n        status: \"implemented\",\n        evidence: [\"Azure Backup configured properly\"]\n      }, {\n        ksi_id: \"KSI-010\",\n        title: \"Admin accounts protected\",\n        status: \"implemented\",\n        evidence: [\"PIM enforced for admin roles\"]\n      }, {\n        ksi_id: \"KSI-011\",\n        title: \"Containers don't run as root\",\n        status: \"partial\",\n        evidence: [\"Some AKS pods run as root\"]\n      }, {\n        ksi_id: \"KSI-012\",\n        title: \"Azure disks encrypted by default\",\n        status: \"implemented\",\n        evidence: [\"Storage settings enforce encryption\"]\n      }, {\n        ksi_id: \"KSI-013\",\n        title: \"Ports restricted to minimum\",\n        status: \"implemented\",\n        evidence: [\"NSGs properly configured\"]\n      }, {\n        ksi_id: \"KSI-014\",\n        title: \"User accounts use SSO\",\n        status: \"implemented\",\n        evidence: [\"Azure AD SSO implemented\"]\n      }, {\n        ksi_id: \"KSI-015\",\n        title: \"OS hardening applied\",\n        status: \"not-implemented\",\n        evidence: [\"Missing baseline policies\"]\n      }]\n    },\n    gcp: {\n      compliant: 12,\n      nonCompliant: 5,\n      notApplicable: 3,\n      controls: [{\n        ksi_id: \"KSI-001\",\n        title: \"FIPS-validated encryption enabled\",\n        status: \"implemented\",\n        evidence: [\"CMEK enabled for GCS buckets\"]\n      }, {\n        ksi_id: \"KSI-002\",\n        title: \"MFA enabled for all users\",\n        status: \"implemented\",\n        evidence: [\"2SV required for all users\"]\n      }, {\n        ksi_id: \"KSI-003\",\n        title: \"TLS 1.3 enforced on external endpoints\",\n        status: \"implemented\",\n        evidence: [\"Load balancer policies enforce TLS 1.3\"]\n      }, {\n        ksi_id: \"KSI-004\",\n        title: \"Encryption at rest\",\n        status: \"implemented\",\n        evidence: [\"CMEK enabled for all storage\"]\n      }, {\n        ksi_id: \"KSI-005\",\n        title: \"Service account key rotation\",\n        status: \"not-implemented\",\n        evidence: [\"Some service account keys too old\"]\n      }, {\n        ksi_id: \"KSI-006\",\n        title: \"No open firewall rules\",\n        status: \"partial\",\n        evidence: [\"Some open firewall rules exist\"]\n      }, {\n        ksi_id: \"KSI-007\",\n        title: \"Only approved images used\",\n        status: \"implemented\",\n        evidence: [\"Shielded VMs with approved images\"]\n      }, {\n        ksi_id: \"KSI-008\",\n        title: \"Logging enabled\",\n        status: \"implemented\",\n        evidence: [\"Cloud Logging enabled project-wide\"]\n      }, {\n        ksi_id: \"KSI-009\",\n        title: \"Backups scheduled and encrypted\",\n        status: \"implemented\",\n        evidence: [\"Backups configured with encryption\"]\n      }, {\n        ksi_id: \"KSI-010\",\n        title: \"Admin accounts protected\",\n        status: \"implemented\",\n        evidence: [\"2SV enforced for admin accounts\"]\n      }, {\n        ksi_id: \"KSI-011\",\n        title: \"Containers don't run as root\",\n        status: \"not-implemented\",\n        evidence: [\"Many GKE containers run as root\"]\n      }, {\n        ksi_id: \"KSI-012\",\n        title: \"Disks encrypted by default\",\n        status: \"implemented\",\n        evidence: [\"Default encryption enabled\"]\n      }, {\n        ksi_id: \"KSI-013\",\n        title: \"Ports restricted to minimum\",\n        status: \"not-implemented\",\n        evidence: [\"Excessive open ports\"]\n      }, {\n        ksi_id: \"KSI-014\",\n        title: \"User accounts use SSO\",\n        status: \"implemented\",\n        evidence: [\"Google Workspace SSO enabled\"]\n      }, {\n        ksi_id: \"KSI-015\",\n        title: \"OS hardening applied\",\n        status: \"partial\",\n        evidence: [\"Inconsistent hardening\"]\n      }]\n    }\n  };\n\n  // Process the data to include NIST control mapping\n  const result = {};\n  Object.keys(mockData).forEach(provider => {\n    const providerData = mockData[provider];\n    const processed = processKsiResults(providerData.controls);\n\n    // Count compliant NIST controls\n    const nistStats = processed.nistControls.reduce((acc, control) => {\n      if (control.status === \"implemented\") acc.compliant++;else if (control.status === \"partial\") acc.partial++;else acc.nonCompliant++;\n      return acc;\n    }, {\n      compliant: 0,\n      partial: 0,\n      nonCompliant: 0\n    });\n    result[provider] = {\n      compliant: providerData.compliant,\n      nonCompliant: providerData.nonCompliant,\n      notApplicable: providerData.notApplicable,\n      controls: processed.ksis,\n      nistControls: processed.nistControls,\n      nistStats\n    };\n  });\n  return result;\n};","map":{"version":3,"names":["axios","ksiToControlsMap","getNistControlsForKsi","ksiDefinitions","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getComplianceControls","response","get","data","error","console","getCloudProviderStatus","provider","processKsiResults","ksis","nistControlStatus","Object","values","flat","forEach","controlId","id","title","status","mappedKsis","evidence","ksi","ksiId","ksi_id","controls","_ksiDefinitions$ksiId","push","length","map","item","control","every","nistControls","getMockComplianceData","mockData","aws","compliant","nonCompliant","notApplicable","azure","gcp","result","keys","providerData","processed","nistStats","reduce","acc","partial"],"sources":["/Users/ryangutwein/Desktop/Repos/fedramp-ksi-validation/dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async (provider) => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// Process compliance results to include NIST 800-53 mappings\nconst processKsiResults = (ksis) => {\n  // Transform KSI data to include NIST control mappings\n  const nistControlStatus = {};\n  \n  // First, initialize all NIST controls with \"not-implemented\" status\n  Object.values(ksiToControlsMap).flat().forEach(controlId => {\n    if (!nistControlStatus[controlId]) {\n      nistControlStatus[controlId] = {\n        id: controlId,\n        title: `${controlId} Control`,\n        status: \"not-implemented\",\n        mappedKsis: [],\n        evidence: []\n      };\n    }\n  });\n  \n  // Now process each KSI and update related NIST controls\n  ksis.forEach(ksi => {\n    const ksiId = ksi.ksi_id;\n    const controls = getNistControlsForKsi(ksiId);\n    \n    // Update each related NIST control\n    controls.forEach(controlId => {\n      // If a KSI is implemented, mark the NIST control as at least partial\n      if (ksi.status === \"implemented\" && nistControlStatus[controlId].status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"partial\";\n      }\n      \n      // If any KSI is not implemented, the NIST control can't be fully implemented\n      if (ksi.status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"not-implemented\";\n      }\n      \n      // Add KSI to the mapping list for this control\n      nistControlStatus[controlId].mappedKsis.push({\n        id: ksiId,\n        title: ksiDefinitions[ksiId]?.title || ksiId,\n        status: ksi.status\n      });\n      \n      // Add evidence from KSI\n      if (ksi.evidence && ksi.evidence.length > 0) {\n        nistControlStatus[controlId].evidence.push(\n          ...ksi.evidence.map(item => `${ksiId}: ${item}`)\n        );\n      }\n    });\n  });\n  \n  // Check if all mapped KSIs for a control are implemented\n  Object.values(nistControlStatus).forEach(control => {\n    if (control.mappedKsis.every(ksi => ksi.status === \"implemented\")) {\n      control.status = \"implemented\";\n    }\n  });\n  \n  return {\n    ksis: ksis,\n    nistControls: Object.values(nistControlStatus)\n  };\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  const mockData = {\n    aws: {\n      compliant: 15,\n      nonCompliant: 3,\n      notApplicable: 2,\n      controls: [\n        { ksi_id: \"KSI-001\", title: \"FIPS-validated encryption enabled\", status: \"implemented\", evidence: [\"KMS keys are properly configured\", \"S3 buckets use encryption\"] },\n        { ksi_id: \"KSI-002\", title: \"MFA enabled for all users\", status: \"implemented\", evidence: [\"All IAM users have MFA enabled\"] },\n        { ksi_id: \"KSI-003\", title: \"TLS 1.3 enforced on external endpoints\", status: \"implemented\", evidence: [\"Load balancers enforce TLS 1.3\"] },\n        { ksi_id: \"KSI-004\", title: \"Encryption at rest\", status: \"implemented\", evidence: [\"All EBS volumes are encrypted\"] },\n        { ksi_id: \"KSI-005\", title: \"IAM keys rotated within 90 days\", status: \"partial\", evidence: [\"Some keys exceed 90 days\"] },\n        { ksi_id: \"KSI-006\", title: \"No open security groups\", status: \"implemented\", evidence: [\"All security groups properly configured\"] },\n        { ksi_id: \"KSI-007\", title: \"Only approved AMIs used\", status: \"implemented\", evidence: [\"All instances use approved AMIs\"] },\n        { ksi_id: \"KSI-008\", title: \"Logging enabled\", status: \"implemented\", evidence: [\"CloudTrail enabled in all regions\"] },\n        { ksi_id: \"KSI-009\", title: \"Backups scheduled and encrypted\", status: \"implemented\", evidence: [\"All backups encrypted and scheduled\"] },\n        { ksi_id: \"KSI-010\", title: \"Root account protected\", status: \"implemented\", evidence: [\"Root account has MFA enabled\"] },\n        { ksi_id: \"KSI-011\", title: \"Containers don't run as root\", status: \"not-implemented\", evidence: [\"Some containers run as root\"] },\n        { ksi_id: \"KSI-012\", title: \"EBS volumes encrypted by default\", status: \"implemented\", evidence: [\"Account settings enforce encryption\"] },\n        { ksi_id: \"KSI-013\", title: \"Ports restricted to minimum\", status: \"partial\", evidence: [\"Some non-essential ports open\"] },\n        { ksi_id: \"KSI-014\", title: \"User accounts use SSO\", status: \"implemented\", evidence: [\"SSO implemented with Active Directory\"] },\n        { ksi_id: \"KSI-015\", title: \"OS hardening applied\", status: \"implemented\", evidence: [\"AMI hardening via automation\"] }\n      ]\n    },\n    azure: {\n      compliant: 14,\n      nonCompliant: 4,\n      notApplicable: 2,\n      controls: [\n        { ksi_id: \"KSI-001\", title: \"FIPS-validated encryption enabled\", status: \"implemented\", evidence: [\"Storage accounts use FIPS encryption\"] },\n        { ksi_id: \"KSI-002\", title: \"MFA enabled for all users\", status: \"implemented\", evidence: [\"MFA enforced via Conditional Access\"] },\n        { ksi_id: \"KSI-003\", title: \"TLS 1.3 enforced on external endpoints\", status: \"not-implemented\", evidence: [\"Still using TLS 1.2 on some endpoints\"] },\n        { ksi_id: \"KSI-004\", title: \"Encryption at rest\", status: \"implemented\", evidence: [\"Storage accounts and disks are encrypted\"] },\n        { ksi_id: \"KSI-005\", title: \"Key rotation policy\", status: \"implemented\", evidence: [\"Key vault rotation policies in place\"] },\n        { ksi_id: \"KSI-006\", title: \"No open NSGs\", status: \"implemented\", evidence: [\"NSGs properly restricted\"] },\n        { ksi_id: \"KSI-007\", title: \"Only approved images used\", status: \"implemented\", evidence: [\"All VMs use approved images\"] },\n        { ksi_id: \"KSI-008\", title: \"Logging enabled\", status: \"implemented\", evidence: [\"Azure Monitor logs enabled\"] },\n        { ksi_id: \"KSI-009\", title: \"Backups scheduled and encrypted\", status: \"implemented\", evidence: [\"Azure Backup configured properly\"] },\n        { ksi_id: \"KSI-010\", title: \"Admin accounts protected\", status: \"implemented\", evidence: [\"PIM enforced for admin roles\"] },\n        { ksi_id: \"KSI-011\", title: \"Containers don't run as root\", status: \"partial\", evidence: [\"Some AKS pods run as root\"] },\n        { ksi_id: \"KSI-012\", title: \"Azure disks encrypted by default\", status: \"implemented\", evidence: [\"Storage settings enforce encryption\"] },\n        { ksi_id: \"KSI-013\", title: \"Ports restricted to minimum\", status: \"implemented\", evidence: [\"NSGs properly configured\"] },\n        { ksi_id: \"KSI-014\", title: \"User accounts use SSO\", status: \"implemented\", evidence: [\"Azure AD SSO implemented\"] },\n        { ksi_id: \"KSI-015\", title: \"OS hardening applied\", status: \"not-implemented\", evidence: [\"Missing baseline policies\"] }\n      ]\n    },\n    gcp: {\n      compliant: 12,\n      nonCompliant: 5,\n      notApplicable: 3,\n      controls: [\n        { ksi_id: \"KSI-001\", title: \"FIPS-validated encryption enabled\", status: \"implemented\", evidence: [\"CMEK enabled for GCS buckets\"] },\n        { ksi_id: \"KSI-002\", title: \"MFA enabled for all users\", status: \"implemented\", evidence: [\"2SV required for all users\"] },\n        { ksi_id: \"KSI-003\", title: \"TLS 1.3 enforced on external endpoints\", status: \"implemented\", evidence: [\"Load balancer policies enforce TLS 1.3\"] },\n        { ksi_id: \"KSI-004\", title: \"Encryption at rest\", status: \"implemented\", evidence: [\"CMEK enabled for all storage\"] },\n        { ksi_id: \"KSI-005\", title: \"Service account key rotation\", status: \"not-implemented\", evidence: [\"Some service account keys too old\"] },\n        { ksi_id: \"KSI-006\", title: \"No open firewall rules\", status: \"partial\", evidence: [\"Some open firewall rules exist\"] },\n        { ksi_id: \"KSI-007\", title: \"Only approved images used\", status: \"implemented\", evidence: [\"Shielded VMs with approved images\"] },\n        { ksi_id: \"KSI-008\", title: \"Logging enabled\", status: \"implemented\", evidence: [\"Cloud Logging enabled project-wide\"] },\n        { ksi_id: \"KSI-009\", title: \"Backups scheduled and encrypted\", status: \"implemented\", evidence: [\"Backups configured with encryption\"] },\n        { ksi_id: \"KSI-010\", title: \"Admin accounts protected\", status: \"implemented\", evidence: [\"2SV enforced for admin accounts\"] },\n        { ksi_id: \"KSI-011\", title: \"Containers don't run as root\", status: \"not-implemented\", evidence: [\"Many GKE containers run as root\"] },\n        { ksi_id: \"KSI-012\", title: \"Disks encrypted by default\", status: \"implemented\", evidence: [\"Default encryption enabled\"] },\n        { ksi_id: \"KSI-013\", title: \"Ports restricted to minimum\", status: \"not-implemented\", evidence: [\"Excessive open ports\"] },\n        { ksi_id: \"KSI-014\", title: \"User accounts use SSO\", status: \"implemented\", evidence: [\"Google Workspace SSO enabled\"] },\n        { ksi_id: \"KSI-015\", title: \"OS hardening applied\", status: \"partial\", evidence: [\"Inconsistent hardening\"] }\n      ]\n    }\n  };\n\n  // Process the data to include NIST control mapping\n  const result = {};\n  Object.keys(mockData).forEach(provider => {\n    const providerData = mockData[provider];\n    const processed = processKsiResults(providerData.controls);\n    \n    // Count compliant NIST controls\n    const nistStats = processed.nistControls.reduce(\n      (acc, control) => {\n        if (control.status === \"implemented\") acc.compliant++;\n        else if (control.status === \"partial\") acc.partial++;\n        else acc.nonCompliant++;\n        return acc;\n      },\n      { compliant: 0, partial: 0, nonCompliant: 0 }\n    );\n    \n    result[provider] = {\n      compliant: providerData.compliant,\n      nonCompliant: providerData.nonCompliant,\n      notApplicable: providerData.notApplicable,\n      controls: processed.ksis,\n      nistControls: processed.nistControls,\n      nistStats\n    };\n  });\n  \n  return result;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}