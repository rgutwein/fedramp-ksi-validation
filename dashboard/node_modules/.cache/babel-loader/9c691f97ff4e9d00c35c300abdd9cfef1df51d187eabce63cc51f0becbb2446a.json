{"ast":null,"code":"import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async provider => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// Process compliance results to include NIST 800-53 mappings\nconst processKsiResults = ksis => {\n  // Transform KSI data to include NIST control mappings\n  const nistControlStatus = {};\n\n  // First, initialize all NIST controls with \"not-implemented\" status\n  Object.values(ksiToControlsMap).flat().forEach(controlId => {\n    if (!nistControlStatus[controlId]) {\n      nistControlStatus[controlId] = {\n        id: controlId,\n        title: `${controlId} Control`,\n        status: \"not-implemented\",\n        mappedKsis: [],\n        evidence: []\n      };\n    }\n  });\n\n  // Now process each KSI and update related NIST controls\n  ksis.forEach(ksi => {\n    const ksiId = ksi.ksi_id;\n    const controls = getNistControlsForKsi(ksiId);\n\n    // Update each related NIST control\n    controls.forEach(controlId => {\n      var _ksiDefinitions$ksiId;\n      // If a KSI is implemented, mark the NIST control as at least partial\n      if (ksi.status === \"implemented\" && nistControlStatus[controlId].status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"partial\";\n      }\n\n      // If any KSI is not implemented, the NIST control can't be fully implemented\n      if (ksi.status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"not-implemented\";\n      }\n\n      // Add KSI to the mapping list for this control\n      nistControlStatus[controlId].mappedKsis.push({\n        id: ksiId,\n        title: ((_ksiDefinitions$ksiId = ksiDefinitions[ksiId]) === null || _ksiDefinitions$ksiId === void 0 ? void 0 : _ksiDefinitions$ksiId.title) || ksiId,\n        status: ksi.status\n      });\n\n      // Add evidence from KSI\n      if (ksi.evidence && ksi.evidence.length > 0) {\n        nistControlStatus[controlId].evidence.push(...ksi.evidence.map(item => `${ksiId}: ${item}`));\n      }\n    });\n  });\n\n  // Check if all mapped KSIs for a control are implemented\n  Object.values(nistControlStatus).forEach(control => {\n    if (control.mappedKsis.every(ksi => ksi.status === \"implemented\")) {\n      control.status = \"implemented\";\n    }\n  });\n  return {\n    ksis: ksis,\n    nistControls: Object.values(nistControlStatus)\n  };\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  // Base mock data\n  const mockData = {\n    aws: {\n      compliant: 7,\n      nonCompliant: 3,\n      notApplicable: 0,\n      controls: [{\n        ksi_id: \"KSI-1\",\n        status: \"implemented\",\n        evidence: [\"Vulnerability scanning runs daily via AWS Inspector\"]\n      }, {\n        ksi_id: \"KSI-2\",\n        status: \"implemented\",\n        evidence: [\"MFA enabled for all IAM users\"]\n      }, {\n        ksi_id: \"KSI-3\",\n        status: \"partial\",\n        evidence: [\"Some instances use AWS Systems Manager for patching\"]\n      }, {\n        ksi_id: \"KSI-4\",\n        status: \"implemented\",\n        evidence: [\"IAM Access Analyzer reviews performed quarterly\"]\n      }, {\n        ksi_id: \"KSI-5\",\n        status: \"implemented\",\n        evidence: [\"GuardDuty and SecurityHub enabled for detection\"]\n      }, {\n        ksi_id: \"KSI-6\",\n        status: \"implemented\",\n        evidence: [\"KMS used for all data encryption\"]\n      }, {\n        ksi_id: \"KSI-7\",\n        status: \"not-implemented\",\n        evidence: [\"Training program not fully implemented\"]\n      }, {\n        ksi_id: \"KSI-8\",\n        status: \"implemented\",\n        evidence: [\"AWS Backup configured for all critical resources\"]\n      }, {\n        ksi_id: \"KSI-9\",\n        status: \"implemented\",\n        evidence: [\"CloudTrail and CloudWatch configured for logging\"]\n      }, {\n        ksi_id: \"KSI-10\",\n        status: \"partial\",\n        evidence: [\"Some resources tracked in AWS Config\"]\n      }]\n    },\n    azure: {\n      compliant: 6,\n      nonCompliant: 4,\n      notApplicable: 0,\n      controls: [{\n        ksi_id: \"KSI-1\",\n        status: \"implemented\",\n        evidence: [\"Microsoft Defender for Cloud performs daily scanning\"]\n      }, {\n        ksi_id: \"KSI-2\",\n        status: \"implemented\",\n        evidence: [\"Azure AD MFA enforced via conditional access\"]\n      }, {\n        ksi_id: \"KSI-3\",\n        status: \"not-implemented\",\n        evidence: [\"No automated patching solution in place\"]\n      }, {\n        ksi_id: \"KSI-4\",\n        status: \"implemented\",\n        evidence: [\"PIM used for access reviews\"]\n      }, {\n        ksi_id: \"KSI-5\",\n        status: \"implemented\",\n        evidence: [\"Azure Sentinel deployed for SIEM\"]\n      }, {\n        ksi_id: \"KSI-6\",\n        status: \"implemented\",\n        evidence: [\"Azure Key Vault used for encryption\"]\n      }, {\n        ksi_id: \"KSI-7\",\n        status: \"partial\",\n        evidence: [\"Some staff completed security training\"]\n      }, {\n        ksi_id: \"KSI-8\",\n        status: \"implemented\",\n        evidence: [\"Azure Backup configured for VMs and databases\"]\n      }, {\n        ksi_id: \"KSI-9\",\n        status: \"partial\",\n        evidence: [\"Some logging gaps in application services\"]\n      }, {\n        ksi_id: \"KSI-10\",\n        status: \"not-implemented\",\n        evidence: [\"Configuration management not implemented\"]\n      }]\n    },\n    gcp: {\n      compliant: 5,\n      nonCompliant: 5,\n      notApplicable: 0,\n      controls: [{\n        ksi_id: \"KSI-1\",\n        status: \"implemented\",\n        evidence: [\"Security Command Center performs continuous scanning\"]\n      }, {\n        ksi_id: \"KSI-2\",\n        status: \"implemented\",\n        evidence: [\"2SV enforced for all user accounts\"]\n      }, {\n        ksi_id: \"KSI-3\",\n        status: \"not-implemented\",\n        evidence: [\"OS patching performed manually\"]\n      }, {\n        ksi_id: \"KSI-4\",\n        status: \"partial\",\n        evidence: [\"Inconsistent access reviews\"]\n      }, {\n        ksi_id: \"KSI-5\",\n        status: \"implemented\",\n        evidence: [\"Cloud Logging and Security Command Center alerts configured\"]\n      }, {\n        ksi_id: \"KSI-6\",\n        status: \"implemented\",\n        evidence: [\"CMEK used for encryption\"]\n      }, {\n        ksi_id: \"KSI-7\",\n        status: \"not-implemented\",\n        evidence: [\"No formal security training program\"]\n      }, {\n        ksi_id: \"KSI-8\",\n        status: \"implemented\",\n        evidence: [\"Scheduled backups configured\"]\n      }, {\n        ksi_id: \"KSI-9\",\n        status: \"partial\",\n        evidence: [\"Some logging gaps exist\"]\n      }, {\n        ksi_id: \"KSI-10\",\n        status: \"not-implemented\",\n        evidence: [\"No formal configuration management\"]\n      }]\n    }\n  };\n\n  // Process the data to include NIST control mapping\n  const result = {};\n  Object.keys(mockData).forEach(provider => {\n    const providerData = mockData[provider];\n    const processed = processKsiResults(providerData.controls);\n\n    // Count compliant NIST controls\n    const nistStats = processed.nistControls.reduce((acc, control) => {\n      if (control.status === \"implemented\") acc.compliant++;else if (control.status === \"partial\") acc.partial++;else acc.nonCompliant++;\n      return acc;\n    }, {\n      compliant: 0,\n      partial: 0,\n      nonCompliant: 0\n    });\n    result[provider] = {\n      compliant: providerData.compliant,\n      nonCompliant: providerData.nonCompliant,\n      notApplicable: providerData.notApplicable,\n      controls: providerData.controls,\n      nistControls: processed.nistControls,\n      nistStats\n    };\n  });\n  return result;\n};","map":{"version":3,"names":["axios","ksiToControlsMap","getNistControlsForKsi","ksiDefinitions","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getComplianceControls","response","get","data","error","console","getCloudProviderStatus","provider","processKsiResults","ksis","nistControlStatus","Object","values","flat","forEach","controlId","id","title","status","mappedKsis","evidence","ksi","ksiId","ksi_id","controls","_ksiDefinitions$ksiId","push","length","map","item","control","every","nistControls","getMockComplianceData","mockData","aws","compliant","nonCompliant","notApplicable","azure","gcp","result","keys","providerData","processed","nistStats","reduce","acc","partial"],"sources":["/Users/ryangutwein/Desktop/Repos/fedramp-ksi-validation/dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async (provider) => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// Process compliance results to include NIST 800-53 mappings\nconst processKsiResults = (ksis) => {\n  // Transform KSI data to include NIST control mappings\n  const nistControlStatus = {};\n  \n  // First, initialize all NIST controls with \"not-implemented\" status\n  Object.values(ksiToControlsMap).flat().forEach(controlId => {\n    if (!nistControlStatus[controlId]) {\n      nistControlStatus[controlId] = {\n        id: controlId,\n        title: `${controlId} Control`,\n        status: \"not-implemented\",\n        mappedKsis: [],\n        evidence: []\n      };\n    }\n  });\n  \n  // Now process each KSI and update related NIST controls\n  ksis.forEach(ksi => {\n    const ksiId = ksi.ksi_id;\n    const controls = getNistControlsForKsi(ksiId);\n    \n    // Update each related NIST control\n    controls.forEach(controlId => {\n      // If a KSI is implemented, mark the NIST control as at least partial\n      if (ksi.status === \"implemented\" && nistControlStatus[controlId].status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"partial\";\n      }\n      \n      // If any KSI is not implemented, the NIST control can't be fully implemented\n      if (ksi.status !== \"implemented\") {\n        nistControlStatus[controlId].status = \"not-implemented\";\n      }\n      \n      // Add KSI to the mapping list for this control\n      nistControlStatus[controlId].mappedKsis.push({\n        id: ksiId,\n        title: ksiDefinitions[ksiId]?.title || ksiId,\n        status: ksi.status\n      });\n      \n      // Add evidence from KSI\n      if (ksi.evidence && ksi.evidence.length > 0) {\n        nistControlStatus[controlId].evidence.push(\n          ...ksi.evidence.map(item => `${ksiId}: ${item}`)\n        );\n      }\n    });\n  });\n  \n  // Check if all mapped KSIs for a control are implemented\n  Object.values(nistControlStatus).forEach(control => {\n    if (control.mappedKsis.every(ksi => ksi.status === \"implemented\")) {\n      control.status = \"implemented\";\n    }\n  });\n  \n  return {\n    ksis: ksis,\n    nistControls: Object.values(nistControlStatus)\n  };\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  // Base mock data\n  const mockData = {\n    aws: {\n      compliant: 7,\n      nonCompliant: 3,\n      notApplicable: 0,\n      controls: [\n        { ksi_id: \"KSI-1\", status: \"implemented\", evidence: [\"Vulnerability scanning runs daily via AWS Inspector\"] },\n        { ksi_id: \"KSI-2\", status: \"implemented\", evidence: [\"MFA enabled for all IAM users\"] },\n        { ksi_id: \"KSI-3\", status: \"partial\", evidence: [\"Some instances use AWS Systems Manager for patching\"] },\n        { ksi_id: \"KSI-4\", status: \"implemented\", evidence: [\"IAM Access Analyzer reviews performed quarterly\"] },\n        { ksi_id: \"KSI-5\", status: \"implemented\", evidence: [\"GuardDuty and SecurityHub enabled for detection\"] },\n        { ksi_id: \"KSI-6\", status: \"implemented\", evidence: [\"KMS used for all data encryption\"] },\n        { ksi_id: \"KSI-7\", status: \"not-implemented\", evidence: [\"Training program not fully implemented\"] },\n        { ksi_id: \"KSI-8\", status: \"implemented\", evidence: [\"AWS Backup configured for all critical resources\"] },\n        { ksi_id: \"KSI-9\", status: \"implemented\", evidence: [\"CloudTrail and CloudWatch configured for logging\"] },\n        { ksi_id: \"KSI-10\", status: \"partial\", evidence: [\"Some resources tracked in AWS Config\"] }\n      ]\n    },\n    azure: {\n      compliant: 6,\n      nonCompliant: 4,\n      notApplicable: 0,\n      controls: [\n        { ksi_id: \"KSI-1\", status: \"implemented\", evidence: [\"Microsoft Defender for Cloud performs daily scanning\"] },\n        { ksi_id: \"KSI-2\", status: \"implemented\", evidence: [\"Azure AD MFA enforced via conditional access\"] },\n        { ksi_id: \"KSI-3\", status: \"not-implemented\", evidence: [\"No automated patching solution in place\"] },\n        { ksi_id: \"KSI-4\", status: \"implemented\", evidence: [\"PIM used for access reviews\"] },\n        { ksi_id: \"KSI-5\", status: \"implemented\", evidence: [\"Azure Sentinel deployed for SIEM\"] },\n        { ksi_id: \"KSI-6\", status: \"implemented\", evidence: [\"Azure Key Vault used for encryption\"] },\n        { ksi_id: \"KSI-7\", status: \"partial\", evidence: [\"Some staff completed security training\"] },\n        { ksi_id: \"KSI-8\", status: \"implemented\", evidence: [\"Azure Backup configured for VMs and databases\"] },\n        { ksi_id: \"KSI-9\", status: \"partial\", evidence: [\"Some logging gaps in application services\"] },\n        { ksi_id: \"KSI-10\", status: \"not-implemented\", evidence: [\"Configuration management not implemented\"] }\n      ]\n    },\n    gcp: {\n      compliant: 5,\n      nonCompliant: 5,\n      notApplicable: 0,\n      controls: [\n        { ksi_id: \"KSI-1\", status: \"implemented\", evidence: [\"Security Command Center performs continuous scanning\"] },\n        { ksi_id: \"KSI-2\", status: \"implemented\", evidence: [\"2SV enforced for all user accounts\"] },\n        { ksi_id: \"KSI-3\", status: \"not-implemented\", evidence: [\"OS patching performed manually\"] },\n        { ksi_id: \"KSI-4\", status: \"partial\", evidence: [\"Inconsistent access reviews\"] },\n        { ksi_id: \"KSI-5\", status: \"implemented\", evidence: [\"Cloud Logging and Security Command Center alerts configured\"] },\n        { ksi_id: \"KSI-6\", status: \"implemented\", evidence: [\"CMEK used for encryption\"] },\n        { ksi_id: \"KSI-7\", status: \"not-implemented\", evidence: [\"No formal security training program\"] },\n        { ksi_id: \"KSI-8\", status: \"implemented\", evidence: [\"Scheduled backups configured\"] },\n        { ksi_id: \"KSI-9\", status: \"partial\", evidence: [\"Some logging gaps exist\"] },\n        { ksi_id: \"KSI-10\", status: \"not-implemented\", evidence: [\"No formal configuration management\"] }\n      ]\n    }\n  };\n\n  // Process the data to include NIST control mapping\n  const result = {};\n  Object.keys(mockData).forEach(provider => {\n    const providerData = mockData[provider];\n    const processed = processKsiResults(providerData.controls);\n    \n    // Count compliant NIST controls\n    const nistStats = processed.nistControls.reduce(\n      (acc, control) => {\n        if (control.status === \"implemented\") acc.compliant++;\n        else if (control.status === \"partial\") acc.partial++;\n        else acc.nonCompliant++;\n        return acc;\n      },\n      { compliant: 0, partial: 0, nonCompliant: 0 }\n    );\n    \n    result[provider] = {\n      compliant: providerData.compliant,\n      nonCompliant: providerData.nonCompliant,\n      notApplicable: providerData.notApplicable,\n      controls: providerData.controls,\n      nistControls: processed.nistControls,\n      nistStats\n    };\n  });\n  \n  return result;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}