{"ast":null,"code":"import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\nimport { getNistControlsForKsi as getNistControlsForKsiService, getKsisForNistControl, validateKsi } from './mappingService';\nimport { ksis, nistControls, getRelatedKsis, getRelatedControls, getAllKsis, getAllNistControls } from './ksiService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Generate mock compliance results that include NIST 800-53 mappings\nconst processComplianceResults = async results => {\n  try {\n    // Add NIST 800-53 control mappings for each KSI\n    const enhancedResults = [];\n    for (const result of results) {\n      const nistControls = await getNistControlsForKsi(result.id);\n      enhancedResults.push({\n        ...result,\n        nistControls\n      });\n    }\n    return enhancedResults;\n  } catch (error) {\n    console.error('Error processing compliance results:', error);\n    return results;\n  }\n};\n\n// Get all compliance controls with their status\nconst getComplianceControls = async () => {\n  try {\n    // Fetch all KSIs\n    const ksis = await getAllKsis();\n    const processedResults = await processComplianceResults(ksis);\n    return processedResults;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    return [];\n  }\n};\n\n// Get compliance status for a specific cloud provider\nconst getCloudProviderStatus = async provider => {\n  try {\n    // Fetch all KSIs\n    const ksis = await getAllKsis();\n\n    // Filter KSIs for the specific provider\n    const providerKsis = ksis.filter(ksi => ksi.provider === provider);\n\n    // Calculate compliance statistics\n    const totalControls = providerKsis.length;\n    const compliantControls = providerKsis.filter(ksi => ksi.status === 'compliant').length;\n    const partialControls = providerKsis.filter(ksi => ksi.status === 'partial').length;\n    const nonCompliantControls = providerKsis.filter(ksi => ksi.status === 'non-compliant').length;\n    return {\n      provider,\n      totalControls,\n      compliantControls,\n      partialControls,\n      nonCompliantControls,\n      compliancePercentage: totalControls > 0 ? Math.round(compliantControls / totalControls * 100) : 0,\n      controls: providerKsis\n    };\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    return {\n      provider,\n      totalControls: 0,\n      compliantControls: 0,\n      partialControls: 0,\n      nonCompliantControls: 0,\n      compliancePercentage: 0,\n      controls: []\n    };\n  }\n};\n\n// Validate a KSI implementation\nconst validateKsiImplementation = async (ksiId, evidence) => {\n  try {\n    return validateKsi(ksiId, evidence);\n  } catch (error) {\n    console.error('Error validating KSI implementation:', error);\n    return {\n      valid: false,\n      message: 'Error validating KSI',\n      validationSteps: []\n    };\n  }\n};\n\n// Get NIST 800-53 controls with their status\nconst getNistControls = async () => {\n  try {\n    return await getAllNistControls();\n  } catch (error) {\n    console.error('Error fetching NIST controls:', error);\n    return [];\n  }\n};\n\n// Get mock compliance data for dashboard\nconst getMockComplianceData = () => {\n  // AWS Mock Data\n  const awsData = {\n    provider: 'AWS',\n    timestamp: new Date().toISOString(),\n    complianceScore: 78,\n    controlStatus: {\n      compliant: 35,\n      partial: 12,\n      nonCompliant: 8\n    },\n    riskAreas: [{\n      name: 'Access Control',\n      compliant: 80\n    }, {\n      name: 'Data Protection',\n      compliant: 75\n    }, {\n      name: 'Incident Response',\n      compliant: 65\n    }, {\n      name: 'Network Security',\n      compliant: 90\n    }, {\n      name: 'Configuration Management',\n      compliant: 70\n    }],\n    recentFindings: [{\n      id: 'F-1001',\n      severity: 'High',\n      description: 'S3 bucket without encryption',\n      control: 'KSI-6',\n      date: '2023-09-15'\n    }, {\n      id: 'F-1002',\n      severity: 'Medium',\n      description: 'IAM users without MFA',\n      control: 'KSI-2',\n      date: '2023-09-14'\n    }, {\n      id: 'F-1003',\n      severity: 'Low',\n      description: 'Unused security groups',\n      control: 'KSI-13',\n      date: '2023-09-12'\n    }]\n  };\n\n  // Azure Mock Data\n  const azureData = {\n    provider: 'Azure',\n    timestamp: new Date().toISOString(),\n    complianceScore: 82,\n    controlStatus: {\n      compliant: 38,\n      partial: 10,\n      nonCompliant: 5\n    },\n    riskAreas: [{\n      name: 'Access Control',\n      compliant: 85\n    }, {\n      name: 'Data Protection',\n      compliant: 80\n    }, {\n      name: 'Incident Response',\n      compliant: 75\n    }, {\n      name: 'Network Security',\n      compliant: 85\n    }, {\n      name: 'Configuration Management',\n      compliant: 80\n    }],\n    recentFindings: [{\n      id: 'F-2001',\n      severity: 'High',\n      description: 'Storage account without encryption',\n      control: 'KSI-6',\n      date: '2023-09-16'\n    }, {\n      id: 'F-2002',\n      severity: 'Medium',\n      description: 'Accounts without MFA',\n      control: 'KSI-2',\n      date: '2023-09-15'\n    }, {\n      id: 'F-2003',\n      severity: 'Low',\n      description: 'Unused network security groups',\n      control: 'KSI-13',\n      date: '2023-09-13'\n    }]\n  };\n\n  // GCP Mock Data\n  const gcpData = {\n    provider: 'GCP',\n    timestamp: new Date().toISOString(),\n    complianceScore: 75,\n    controlStatus: {\n      compliant: 32,\n      partial: 15,\n      nonCompliant: 10\n    },\n    riskAreas: [{\n      name: 'Access Control',\n      compliant: 70\n    }, {\n      name: 'Data Protection',\n      compliant: 80\n    }, {\n      name: 'Incident Response',\n      compliant: 60\n    }, {\n      name: 'Network Security',\n      compliant: 85\n    }, {\n      name: 'Configuration Management',\n      compliant: 75\n    }],\n    recentFindings: [{\n      id: 'F-3001',\n      severity: 'High',\n      description: 'Cloud Storage without encryption',\n      control: 'KSI-6',\n      date: '2023-09-14'\n    }, {\n      id: 'F-3002',\n      severity: 'Medium',\n      description: 'Users without 2FA',\n      control: 'KSI-2',\n      date: '2023-09-13'\n    }, {\n      id: 'F-3003',\n      severity: 'Low',\n      description: 'Default network with overly permissive firewall rules',\n      control: 'KSI-13',\n      date: '2023-09-10'\n    }]\n  };\n  return {\n    aws: awsData,\n    azure: azureData,\n    gcp: gcpData,\n    summary: {\n      totalControls: 55,\n      compliantControls: 35 + 38 + 32,\n      partialControls: 12 + 10 + 15,\n      nonCompliantControls: 8 + 5 + 10,\n      averageComplianceScore: Math.round((78 + 82 + 75) / 3),\n      providers: [{\n        name: 'AWS',\n        score: 78\n      }, {\n        name: 'Azure',\n        score: 82\n      }, {\n        name: 'GCP',\n        score: 75\n      }]\n    }\n  };\n};\n\n// Fetch detailed compliance status for a specific control\nexport const getControlDetails = async controlId => {\n  var _getMockComplianceDat, _getMockComplianceDat2, _getMockComplianceDat3;\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n\n  // Get the KSI data\n  const ksi = ksis.find(k => k.id === controlId);\n  if (!ksi) {\n    return {\n      success: false,\n      error: 'Control not found'\n    };\n  }\n\n  // Get related NIST controls\n  const nistMappings = getNistControlsForKsiService(controlId);\n  const relatedNistControls = nistMappings.map(nistId => {\n    const control = nistControls.find(c => c.id === nistId) || {\n      id: nistId,\n      name: 'Unknown Control'\n    };\n    return control;\n  });\n\n  // Get cloud provider status for this control\n  const awsStatus = ((_getMockComplianceDat = getMockComplianceData('aws').controls.find(c => c.id === controlId)) === null || _getMockComplianceDat === void 0 ? void 0 : _getMockComplianceDat.status) || 'unknown';\n  const azureStatus = ((_getMockComplianceDat2 = getMockComplianceData('azure').controls.find(c => c.id === controlId)) === null || _getMockComplianceDat2 === void 0 ? void 0 : _getMockComplianceDat2.status) || 'unknown';\n  const gcpStatus = ((_getMockComplianceDat3 = getMockComplianceData('gcp').controls.find(c => c.id === controlId)) === null || _getMockComplianceDat3 === void 0 ? void 0 : _getMockComplianceDat3.status) || 'unknown';\n\n  // Return detailed control data\n  return {\n    success: true,\n    data: {\n      ...ksi,\n      nistControls: relatedNistControls,\n      cloudStatus: {\n        aws: awsStatus,\n        azure: azureStatus,\n        gcp: gcpStatus\n      }\n    }\n  };\n};\n\n// Fetch NIST control details\nexport const getNistControlDetails = async controlId => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n\n  // Find the NIST control\n  const control = nistControls.find(c => c.id === controlId);\n  if (!control) {\n    return {\n      success: false,\n      error: 'NIST control not found'\n    };\n  }\n\n  // Get related KSIs\n  const relatedKsiIds = getKsisForNistControl(controlId);\n  const relatedKsiControls = relatedKsiIds.map(ksiId => {\n    const ksi = ksis.find(k => k.id === ksiId) || {\n      id: ksiId,\n      name: 'Unknown KSI'\n    };\n    return ksi;\n  });\n\n  // Return detailed NIST control data\n  return {\n    success: true,\n    data: {\n      ...control,\n      relatedKsis: relatedKsiControls\n    }\n  };\n};\n\n// Submit a validation result for a KSI\nexport const submitKsiValidation = async (ksiId, validationData) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n\n  // In a real app, this would send the validation data to a backend API\n  // For this demo, we'll just simulate a successful submission\n  console.log(`Submitting validation for KSI ${ksiId}:`, validationData);\n  return {\n    success: true,\n    data: {\n      message: `Validation for KSI ${ksiId} submitted successfully`,\n      timestamp: new Date().toISOString()\n    }\n  };\n};\n\n// Get a list of all systems\nexport const getSystems = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n\n  // Mock data for systems\n  const systems = [{\n    id: 'sys-001',\n    name: 'Financial Processing System',\n    type: 'High Impact',\n    status: 'Production'\n  }, {\n    id: 'sys-002',\n    name: 'Customer Data Platform',\n    type: 'Moderate Impact',\n    status: 'Production'\n  }, {\n    id: 'sys-003',\n    name: 'Internal HR Portal',\n    type: 'Low Impact',\n    status: 'Production'\n  }, {\n    id: 'sys-004',\n    name: 'Development Environment',\n    type: 'Low Impact',\n    status: 'Development'\n  }, {\n    id: 'sys-005',\n    name: 'Security Operations Center',\n    type: 'High Impact',\n    status: 'Production'\n  }];\n  return {\n    success: true,\n    data: systems\n  };\n};\n\n// Get detailed system information\nexport const getSystemDetails = async systemId => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 700));\n\n  // Mock system details\n  const systemDetails = {\n    id: systemId,\n    name: systemId === 'sys-001' ? 'Financial Processing System' : systemId === 'sys-002' ? 'Customer Data Platform' : systemId === 'sys-003' ? 'Internal HR Portal' : systemId === 'sys-004' ? 'Development Environment' : systemId === 'sys-005' ? 'Security Operations Center' : 'Unknown System',\n    description: 'This is a detailed description of the system and its purpose.',\n    owner: 'IT Department',\n    securityContact: 'security@example.com',\n    deploymentDate: '2023-01-15',\n    lastAssessment: '2023-06-10',\n    impact: systemId === 'sys-001' || systemId === 'sys-005' ? 'High' : systemId === 'sys-002' ? 'Moderate' : 'Low',\n    status: systemId === 'sys-004' ? 'Development' : 'Production',\n    components: [{\n      name: 'Frontend Application',\n      type: 'Web',\n      technology: 'React',\n      hostingProvider: 'AWS'\n    }, {\n      name: 'API Gateway',\n      type: 'Service',\n      technology: 'AWS API Gateway',\n      hostingProvider: 'AWS'\n    }, {\n      name: 'Backend Services',\n      type: 'Service',\n      technology: 'Node.js',\n      hostingProvider: 'AWS'\n    }, {\n      name: 'Database',\n      type: 'Database',\n      technology: 'PostgreSQL',\n      hostingProvider: 'AWS RDS'\n    }],\n    ksis: systemId === 'sys-001' ? ['KSI-1', 'KSI-2', 'KSI-3', 'KSI-4', 'KSI-5', 'KSI-6', 'KSI-7', 'KSI-8', 'KSI-9', 'KSI-10'] : systemId === 'sys-002' ? ['KSI-1', 'KSI-2', 'KSI-4', 'KSI-6', 'KSI-8', 'KSI-10'] : systemId === 'sys-003' ? ['KSI-1', 'KSI-2', 'KSI-7'] : systemId === 'sys-004' ? ['KSI-1', 'KSI-9'] : systemId === 'sys-005' ? ['KSI-1', 'KSI-2', 'KSI-3', 'KSI-4', 'KSI-5', 'KSI-8'] : [],\n    complianceStatus: {\n      fedramp: systemId === 'sys-001' ? 'Authorized' : systemId === 'sys-002' ? 'In Process' : systemId === 'sys-003' ? 'Compliant' : systemId === 'sys-004' ? 'Not Applicable' : systemId === 'sys-005' ? 'Authorized' : 'Unknown',\n      fisma: systemId === 'sys-001' || systemId === 'sys-005' ? 'High' : systemId === 'sys-002' ? 'Moderate' : systemId === 'sys-003' || systemId === 'sys-004' ? 'Low' : 'Unknown',\n      hipaa: systemId === 'sys-001' || systemId === 'sys-002' ? 'Compliant' : 'Not Applicable',\n      pci: systemId === 'sys-001' ? 'Compliant' : 'Not Applicable'\n    }\n  };\n  return {\n    success: true,\n    data: systemDetails\n  };\n};\nexport { getComplianceControls, getCloudProviderStatus, validateKsiImplementation, getNistControls, getMockComplianceData };","map":{"version":3,"names":["axios","ksiToControlsMap","getNistControlsForKsi","ksiDefinitions","getNistControlsForKsiService","getKsisForNistControl","validateKsi","ksis","nistControls","getRelatedKsis","getRelatedControls","getAllKsis","getAllNistControls","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","processComplianceResults","results","enhancedResults","result","id","push","error","console","getComplianceControls","processedResults","getCloudProviderStatus","provider","providerKsis","filter","ksi","totalControls","length","compliantControls","status","partialControls","nonCompliantControls","compliancePercentage","Math","round","controls","validateKsiImplementation","ksiId","evidence","valid","message","validationSteps","getNistControls","getMockComplianceData","awsData","timestamp","Date","toISOString","complianceScore","controlStatus","compliant","partial","nonCompliant","riskAreas","name","recentFindings","severity","description","control","date","azureData","gcpData","aws","azure","gcp","summary","averageComplianceScore","providers","score","getControlDetails","controlId","_getMockComplianceDat","_getMockComplianceDat2","_getMockComplianceDat3","Promise","resolve","setTimeout","find","k","success","nistMappings","relatedNistControls","map","nistId","c","awsStatus","azureStatus","gcpStatus","data","cloudStatus","getNistControlDetails","relatedKsiIds","relatedKsiControls","relatedKsis","submitKsiValidation","validationData","log","getSystems","systems","type","getSystemDetails","systemId","systemDetails","owner","securityContact","deploymentDate","lastAssessment","impact","components","technology","hostingProvider","complianceStatus","fedramp","fisma","hipaa","pci"],"sources":["/Users/ryangutwein/Desktop/Repos/fedramp-ksi-validation/dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport { ksiToControlsMap, getNistControlsForKsi, ksiDefinitions } from './mappingService';\nimport { getNistControlsForKsi as getNistControlsForKsiService, getKsisForNistControl, validateKsi } from './mappingService';\nimport { ksis, nistControls, getRelatedKsis, getRelatedControls, getAllKsis, getAllNistControls } from './ksiService';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Generate mock compliance results that include NIST 800-53 mappings\nconst processComplianceResults = async (results) => {\n  try {\n    // Add NIST 800-53 control mappings for each KSI\n    const enhancedResults = [];\n    \n    for (const result of results) {\n      const nistControls = await getNistControlsForKsi(result.id);\n      \n      enhancedResults.push({\n        ...result,\n        nistControls\n      });\n    }\n    \n    return enhancedResults;\n  } catch (error) {\n    console.error('Error processing compliance results:', error);\n    return results;\n  }\n};\n\n// Get all compliance controls with their status\nconst getComplianceControls = async () => {\n  try {\n    // Fetch all KSIs\n    const ksis = await getAllKsis();\n    const processedResults = await processComplianceResults(ksis);\n    \n    return processedResults;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    return [];\n  }\n};\n\n// Get compliance status for a specific cloud provider\nconst getCloudProviderStatus = async (provider) => {\n  try {\n    // Fetch all KSIs\n    const ksis = await getAllKsis();\n    \n    // Filter KSIs for the specific provider\n    const providerKsis = ksis.filter(ksi => ksi.provider === provider);\n    \n    // Calculate compliance statistics\n    const totalControls = providerKsis.length;\n    const compliantControls = providerKsis.filter(ksi => ksi.status === 'compliant').length;\n    const partialControls = providerKsis.filter(ksi => ksi.status === 'partial').length;\n    const nonCompliantControls = providerKsis.filter(ksi => ksi.status === 'non-compliant').length;\n    \n    return {\n      provider,\n      totalControls,\n      compliantControls,\n      partialControls,\n      nonCompliantControls,\n      compliancePercentage: totalControls > 0 ? Math.round((compliantControls / totalControls) * 100) : 0,\n      controls: providerKsis\n    };\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    return {\n      provider,\n      totalControls: 0,\n      compliantControls: 0,\n      partialControls: 0,\n      nonCompliantControls: 0,\n      compliancePercentage: 0,\n      controls: []\n    };\n  }\n};\n\n// Validate a KSI implementation\nconst validateKsiImplementation = async (ksiId, evidence) => {\n  try {\n    return validateKsi(ksiId, evidence);\n  } catch (error) {\n    console.error('Error validating KSI implementation:', error);\n    return {\n      valid: false,\n      message: 'Error validating KSI',\n      validationSteps: []\n    };\n  }\n};\n\n// Get NIST 800-53 controls with their status\nconst getNistControls = async () => {\n  try {\n    return await getAllNistControls();\n  } catch (error) {\n    console.error('Error fetching NIST controls:', error);\n    return [];\n  }\n};\n\n// Get mock compliance data for dashboard\nconst getMockComplianceData = () => {\n  // AWS Mock Data\n  const awsData = {\n    provider: 'AWS',\n    timestamp: new Date().toISOString(),\n    complianceScore: 78,\n    controlStatus: {\n      compliant: 35,\n      partial: 12,\n      nonCompliant: 8\n    },\n    riskAreas: [\n      { name: 'Access Control', compliant: 80 },\n      { name: 'Data Protection', compliant: 75 },\n      { name: 'Incident Response', compliant: 65 },\n      { name: 'Network Security', compliant: 90 },\n      { name: 'Configuration Management', compliant: 70 }\n    ],\n    recentFindings: [\n      { id: 'F-1001', severity: 'High', description: 'S3 bucket without encryption', control: 'KSI-6', date: '2023-09-15' },\n      { id: 'F-1002', severity: 'Medium', description: 'IAM users without MFA', control: 'KSI-2', date: '2023-09-14' },\n      { id: 'F-1003', severity: 'Low', description: 'Unused security groups', control: 'KSI-13', date: '2023-09-12' }\n    ]\n  };\n\n  // Azure Mock Data\n  const azureData = {\n    provider: 'Azure',\n    timestamp: new Date().toISOString(),\n    complianceScore: 82,\n    controlStatus: {\n      compliant: 38,\n      partial: 10,\n      nonCompliant: 5\n    },\n    riskAreas: [\n      { name: 'Access Control', compliant: 85 },\n      { name: 'Data Protection', compliant: 80 },\n      { name: 'Incident Response', compliant: 75 },\n      { name: 'Network Security', compliant: 85 },\n      { name: 'Configuration Management', compliant: 80 }\n    ],\n    recentFindings: [\n      { id: 'F-2001', severity: 'High', description: 'Storage account without encryption', control: 'KSI-6', date: '2023-09-16' },\n      { id: 'F-2002', severity: 'Medium', description: 'Accounts without MFA', control: 'KSI-2', date: '2023-09-15' },\n      { id: 'F-2003', severity: 'Low', description: 'Unused network security groups', control: 'KSI-13', date: '2023-09-13' }\n    ]\n  };\n\n  // GCP Mock Data\n  const gcpData = {\n    provider: 'GCP',\n    timestamp: new Date().toISOString(),\n    complianceScore: 75,\n    controlStatus: {\n      compliant: 32,\n      partial: 15,\n      nonCompliant: 10\n    },\n    riskAreas: [\n      { name: 'Access Control', compliant: 70 },\n      { name: 'Data Protection', compliant: 80 },\n      { name: 'Incident Response', compliant: 60 },\n      { name: 'Network Security', compliant: 85 },\n      { name: 'Configuration Management', compliant: 75 }\n    ],\n    recentFindings: [\n      { id: 'F-3001', severity: 'High', description: 'Cloud Storage without encryption', control: 'KSI-6', date: '2023-09-14' },\n      { id: 'F-3002', severity: 'Medium', description: 'Users without 2FA', control: 'KSI-2', date: '2023-09-13' },\n      { id: 'F-3003', severity: 'Low', description: 'Default network with overly permissive firewall rules', control: 'KSI-13', date: '2023-09-10' }\n    ]\n  };\n\n  return {\n    aws: awsData,\n    azure: azureData,\n    gcp: gcpData,\n    summary: {\n      totalControls: 55,\n      compliantControls: 35 + 38 + 32,\n      partialControls: 12 + 10 + 15,\n      nonCompliantControls: 8 + 5 + 10,\n      averageComplianceScore: Math.round((78 + 82 + 75) / 3),\n      providers: [\n        { name: 'AWS', score: 78 },\n        { name: 'Azure', score: 82 },\n        { name: 'GCP', score: 75 }\n      ]\n    }\n  };\n};\n\n// Fetch detailed compliance status for a specific control\nexport const getControlDetails = async (controlId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n  \n  // Get the KSI data\n  const ksi = ksis.find(k => k.id === controlId);\n  if (!ksi) {\n    return { success: false, error: 'Control not found' };\n  }\n  \n  // Get related NIST controls\n  const nistMappings = getNistControlsForKsiService(controlId);\n  const relatedNistControls = nistMappings.map(nistId => {\n    const control = nistControls.find(c => c.id === nistId) || { id: nistId, name: 'Unknown Control' };\n    return control;\n  });\n  \n  // Get cloud provider status for this control\n  const awsStatus = getMockComplianceData('aws').controls.find(c => c.id === controlId)?.status || 'unknown';\n  const azureStatus = getMockComplianceData('azure').controls.find(c => c.id === controlId)?.status || 'unknown';\n  const gcpStatus = getMockComplianceData('gcp').controls.find(c => c.id === controlId)?.status || 'unknown';\n  \n  // Return detailed control data\n  return {\n    success: true,\n    data: {\n      ...ksi,\n      nistControls: relatedNistControls,\n      cloudStatus: {\n        aws: awsStatus,\n        azure: azureStatus,\n        gcp: gcpStatus\n      }\n    }\n  };\n};\n\n// Fetch NIST control details\nexport const getNistControlDetails = async (controlId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 600));\n  \n  // Find the NIST control\n  const control = nistControls.find(c => c.id === controlId);\n  if (!control) {\n    return { success: false, error: 'NIST control not found' };\n  }\n  \n  // Get related KSIs\n  const relatedKsiIds = getKsisForNistControl(controlId);\n  const relatedKsiControls = relatedKsiIds.map(ksiId => {\n    const ksi = ksis.find(k => k.id === ksiId) || { id: ksiId, name: 'Unknown KSI' };\n    return ksi;\n  });\n  \n  // Return detailed NIST control data\n  return {\n    success: true,\n    data: {\n      ...control,\n      relatedKsis: relatedKsiControls\n    }\n  };\n};\n\n// Submit a validation result for a KSI\nexport const submitKsiValidation = async (ksiId, validationData) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 800));\n  \n  // In a real app, this would send the validation data to a backend API\n  // For this demo, we'll just simulate a successful submission\n  console.log(`Submitting validation for KSI ${ksiId}:`, validationData);\n  \n  return { \n    success: true, \n    data: { \n      message: `Validation for KSI ${ksiId} submitted successfully`,\n      timestamp: new Date().toISOString()\n    } \n  };\n};\n\n// Get a list of all systems\nexport const getSystems = async () => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 500));\n  \n  // Mock data for systems\n  const systems = [\n    { id: 'sys-001', name: 'Financial Processing System', type: 'High Impact', status: 'Production' },\n    { id: 'sys-002', name: 'Customer Data Platform', type: 'Moderate Impact', status: 'Production' },\n    { id: 'sys-003', name: 'Internal HR Portal', type: 'Low Impact', status: 'Production' },\n    { id: 'sys-004', name: 'Development Environment', type: 'Low Impact', status: 'Development' },\n    { id: 'sys-005', name: 'Security Operations Center', type: 'High Impact', status: 'Production' },\n  ];\n  \n  return { success: true, data: systems };\n};\n\n// Get detailed system information\nexport const getSystemDetails = async (systemId) => {\n  // Simulate network delay\n  await new Promise(resolve => setTimeout(resolve, 700));\n  \n  // Mock system details\n  const systemDetails = {\n    id: systemId,\n    name: systemId === 'sys-001' ? 'Financial Processing System' : \n          systemId === 'sys-002' ? 'Customer Data Platform' : \n          systemId === 'sys-003' ? 'Internal HR Portal' : \n          systemId === 'sys-004' ? 'Development Environment' : \n          systemId === 'sys-005' ? 'Security Operations Center' : 'Unknown System',\n    description: 'This is a detailed description of the system and its purpose.',\n    owner: 'IT Department',\n    securityContact: 'security@example.com',\n    deploymentDate: '2023-01-15',\n    lastAssessment: '2023-06-10',\n    impact: systemId === 'sys-001' || systemId === 'sys-005' ? 'High' : \n            systemId === 'sys-002' ? 'Moderate' : 'Low',\n    status: systemId === 'sys-004' ? 'Development' : 'Production',\n    components: [\n      { name: 'Frontend Application', type: 'Web', technology: 'React', hostingProvider: 'AWS' },\n      { name: 'API Gateway', type: 'Service', technology: 'AWS API Gateway', hostingProvider: 'AWS' },\n      { name: 'Backend Services', type: 'Service', technology: 'Node.js', hostingProvider: 'AWS' },\n      { name: 'Database', type: 'Database', technology: 'PostgreSQL', hostingProvider: 'AWS RDS' }\n    ],\n    ksis: systemId === 'sys-001' ? ['KSI-1', 'KSI-2', 'KSI-3', 'KSI-4', 'KSI-5', 'KSI-6', 'KSI-7', 'KSI-8', 'KSI-9', 'KSI-10'] :\n          systemId === 'sys-002' ? ['KSI-1', 'KSI-2', 'KSI-4', 'KSI-6', 'KSI-8', 'KSI-10'] :\n          systemId === 'sys-003' ? ['KSI-1', 'KSI-2', 'KSI-7'] :\n          systemId === 'sys-004' ? ['KSI-1', 'KSI-9'] :\n          systemId === 'sys-005' ? ['KSI-1', 'KSI-2', 'KSI-3', 'KSI-4', 'KSI-5', 'KSI-8'] : [],\n    complianceStatus: {\n      fedramp: systemId === 'sys-001' ? 'Authorized' : \n              systemId === 'sys-002' ? 'In Process' : \n              systemId === 'sys-003' ? 'Compliant' : \n              systemId === 'sys-004' ? 'Not Applicable' : \n              systemId === 'sys-005' ? 'Authorized' : 'Unknown',\n      fisma: systemId === 'sys-001' || systemId === 'sys-005' ? 'High' :\n             systemId === 'sys-002' ? 'Moderate' :\n             systemId === 'sys-003' || systemId === 'sys-004' ? 'Low' : 'Unknown',\n      hipaa: systemId === 'sys-001' || systemId === 'sys-002' ? 'Compliant' : 'Not Applicable',\n      pci: systemId === 'sys-001' ? 'Compliant' : 'Not Applicable'\n    }\n  };\n  \n  return { success: true, data: systemDetails };\n};\n\nexport {\n  getComplianceControls,\n  getCloudProviderStatus,\n  validateKsiImplementation,\n  getNistControls,\n  getMockComplianceData\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,qBAAqB,EAAEC,cAAc,QAAQ,kBAAkB;AAC1F,SAASD,qBAAqB,IAAIE,4BAA4B,EAAEC,qBAAqB,EAAEC,WAAW,QAAQ,kBAAkB;AAC5H,SAASC,IAAI,EAAEC,YAAY,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,UAAU,EAAEC,kBAAkB,QAAQ,cAAc;;AAErH;AACA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;;AAE5D;AACA,MAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,wBAAwB,GAAG,MAAOC,OAAO,IAAK;EAClD,IAAI;IACF;IACA,MAAMC,eAAe,GAAG,EAAE;IAE1B,KAAK,MAAMC,MAAM,IAAIF,OAAO,EAAE;MAC5B,MAAMd,YAAY,GAAG,MAAMN,qBAAqB,CAACsB,MAAM,CAACC,EAAE,CAAC;MAE3DF,eAAe,CAACG,IAAI,CAAC;QACnB,GAAGF,MAAM;QACThB;MACF,CAAC,CAAC;IACJ;IAEA,OAAOe,eAAe;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAOL,OAAO;EAChB;AACF,CAAC;;AAED;AACA,MAAMO,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF;IACA,MAAMtB,IAAI,GAAG,MAAMI,UAAU,CAAC,CAAC;IAC/B,MAAMmB,gBAAgB,GAAG,MAAMT,wBAAwB,CAACd,IAAI,CAAC;IAE7D,OAAOuB,gBAAgB;EACzB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAMI,sBAAsB,GAAG,MAAOC,QAAQ,IAAK;EACjD,IAAI;IACF;IACA,MAAMzB,IAAI,GAAG,MAAMI,UAAU,CAAC,CAAC;;IAE/B;IACA,MAAMsB,YAAY,GAAG1B,IAAI,CAAC2B,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACH,QAAQ,KAAKA,QAAQ,CAAC;;IAElE;IACA,MAAMI,aAAa,GAAGH,YAAY,CAACI,MAAM;IACzC,MAAMC,iBAAiB,GAAGL,YAAY,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACI,MAAM,KAAK,WAAW,CAAC,CAACF,MAAM;IACvF,MAAMG,eAAe,GAAGP,YAAY,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACI,MAAM,KAAK,SAAS,CAAC,CAACF,MAAM;IACnF,MAAMI,oBAAoB,GAAGR,YAAY,CAACC,MAAM,CAACC,GAAG,IAAIA,GAAG,CAACI,MAAM,KAAK,eAAe,CAAC,CAACF,MAAM;IAE9F,OAAO;MACLL,QAAQ;MACRI,aAAa;MACbE,iBAAiB;MACjBE,eAAe;MACfC,oBAAoB;MACpBC,oBAAoB,EAAEN,aAAa,GAAG,CAAC,GAAGO,IAAI,CAACC,KAAK,CAAEN,iBAAiB,GAAGF,aAAa,GAAI,GAAG,CAAC,GAAG,CAAC;MACnGS,QAAQ,EAAEZ;IACZ,CAAC;EACH,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkBK,QAAQ,qBAAqB,EAAEL,KAAK,CAAC;IACrE,OAAO;MACLK,QAAQ;MACRI,aAAa,EAAE,CAAC;MAChBE,iBAAiB,EAAE,CAAC;MACpBE,eAAe,EAAE,CAAC;MAClBC,oBAAoB,EAAE,CAAC;MACvBC,oBAAoB,EAAE,CAAC;MACvBG,QAAQ,EAAE;IACZ,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMC,yBAAyB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC3D,IAAI;IACF,OAAO1C,WAAW,CAACyC,KAAK,EAAEC,QAAQ,CAAC;EACrC,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,OAAO;MACLsB,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,sBAAsB;MAC/BC,eAAe,EAAE;IACnB,CAAC;EACH;AACF,CAAC;;AAED;AACA,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,OAAO,MAAMxC,kBAAkB,CAAC,CAAC;EACnC,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,MAAM0B,qBAAqB,GAAGA,CAAA,KAAM;EAClC;EACA,MAAMC,OAAO,GAAG;IACdtB,QAAQ,EAAE,KAAK;IACfuB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,eAAe,EAAE,EAAE;IACnBC,aAAa,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE;IAChB,CAAC;IACDC,SAAS,EAAE,CACT;MAAEC,IAAI,EAAE,gBAAgB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EACzC;MAAEI,IAAI,EAAE,iBAAiB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAEI,IAAI,EAAE,mBAAmB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC5C;MAAEI,IAAI,EAAE,kBAAkB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC3C;MAAEI,IAAI,EAAE,0BAA0B;MAAEJ,SAAS,EAAE;IAAG,CAAC,CACpD;IACDK,cAAc,EAAE,CACd;MAAExC,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,MAAM;MAAEC,WAAW,EAAE,8BAA8B;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EACrH;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,QAAQ;MAAEC,WAAW,EAAE,uBAAuB;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EAChH;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,KAAK;MAAEC,WAAW,EAAE,wBAAwB;MAAEC,OAAO,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAa,CAAC;EAEnH,CAAC;;EAED;EACA,MAAMC,SAAS,GAAG;IAChBtC,QAAQ,EAAE,OAAO;IACjBuB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,eAAe,EAAE,EAAE;IACnBC,aAAa,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE;IAChB,CAAC;IACDC,SAAS,EAAE,CACT;MAAEC,IAAI,EAAE,gBAAgB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EACzC;MAAEI,IAAI,EAAE,iBAAiB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAEI,IAAI,EAAE,mBAAmB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC5C;MAAEI,IAAI,EAAE,kBAAkB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC3C;MAAEI,IAAI,EAAE,0BAA0B;MAAEJ,SAAS,EAAE;IAAG,CAAC,CACpD;IACDK,cAAc,EAAE,CACd;MAAExC,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,MAAM;MAAEC,WAAW,EAAE,oCAAoC;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EAC3H;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,QAAQ;MAAEC,WAAW,EAAE,sBAAsB;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EAC/G;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,KAAK;MAAEC,WAAW,EAAE,gCAAgC;MAAEC,OAAO,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAa,CAAC;EAE3H,CAAC;;EAED;EACA,MAAME,OAAO,GAAG;IACdvC,QAAQ,EAAE,KAAK;IACfuB,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,eAAe,EAAE,EAAE;IACnBC,aAAa,EAAE;MACbC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,YAAY,EAAE;IAChB,CAAC;IACDC,SAAS,EAAE,CACT;MAAEC,IAAI,EAAE,gBAAgB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EACzC;MAAEI,IAAI,EAAE,iBAAiB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC1C;MAAEI,IAAI,EAAE,mBAAmB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC5C;MAAEI,IAAI,EAAE,kBAAkB;MAAEJ,SAAS,EAAE;IAAG,CAAC,EAC3C;MAAEI,IAAI,EAAE,0BAA0B;MAAEJ,SAAS,EAAE;IAAG,CAAC,CACpD;IACDK,cAAc,EAAE,CACd;MAAExC,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,MAAM;MAAEC,WAAW,EAAE,kCAAkC;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EACzH;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,QAAQ;MAAEC,WAAW,EAAE,mBAAmB;MAAEC,OAAO,EAAE,OAAO;MAAEC,IAAI,EAAE;IAAa,CAAC,EAC5G;MAAE5C,EAAE,EAAE,QAAQ;MAAEyC,QAAQ,EAAE,KAAK;MAAEC,WAAW,EAAE,uDAAuD;MAAEC,OAAO,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAa,CAAC;EAElJ,CAAC;EAED,OAAO;IACLG,GAAG,EAAElB,OAAO;IACZmB,KAAK,EAAEH,SAAS;IAChBI,GAAG,EAAEH,OAAO;IACZI,OAAO,EAAE;MACPvC,aAAa,EAAE,EAAE;MACjBE,iBAAiB,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;MAC/BE,eAAe,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;MAC7BC,oBAAoB,EAAE,CAAC,GAAG,CAAC,GAAG,EAAE;MAChCmC,sBAAsB,EAAEjC,IAAI,CAACC,KAAK,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;MACtDiC,SAAS,EAAE,CACT;QAAEb,IAAI,EAAE,KAAK;QAAEc,KAAK,EAAE;MAAG,CAAC,EAC1B;QAAEd,IAAI,EAAE,OAAO;QAAEc,KAAK,EAAE;MAAG,CAAC,EAC5B;QAAEd,IAAI,EAAE,KAAK;QAAEc,KAAK,EAAE;MAAG,CAAC;IAE9B;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,SAAS,IAAK;EAAA,IAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;EACpD;EACA,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,MAAMlD,GAAG,GAAG5B,IAAI,CAACgF,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/D,EAAE,KAAKuD,SAAS,CAAC;EAC9C,IAAI,CAAC7C,GAAG,EAAE;IACR,OAAO;MAAEsD,OAAO,EAAE,KAAK;MAAE9D,KAAK,EAAE;IAAoB,CAAC;EACvD;;EAEA;EACA,MAAM+D,YAAY,GAAGtF,4BAA4B,CAAC4E,SAAS,CAAC;EAC5D,MAAMW,mBAAmB,GAAGD,YAAY,CAACE,GAAG,CAACC,MAAM,IAAI;IACrD,MAAMzB,OAAO,GAAG5D,YAAY,CAAC+E,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACrE,EAAE,KAAKoE,MAAM,CAAC,IAAI;MAAEpE,EAAE,EAAEoE,MAAM;MAAE7B,IAAI,EAAE;IAAkB,CAAC;IAClG,OAAOI,OAAO;EAChB,CAAC,CAAC;;EAEF;EACA,MAAM2B,SAAS,GAAG,EAAAd,qBAAA,GAAA5B,qBAAqB,CAAC,KAAK,CAAC,CAACR,QAAQ,CAAC0C,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACrE,EAAE,KAAKuD,SAAS,CAAC,cAAAC,qBAAA,uBAAnEA,qBAAA,CAAqE1C,MAAM,KAAI,SAAS;EAC1G,MAAMyD,WAAW,GAAG,EAAAd,sBAAA,GAAA7B,qBAAqB,CAAC,OAAO,CAAC,CAACR,QAAQ,CAAC0C,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACrE,EAAE,KAAKuD,SAAS,CAAC,cAAAE,sBAAA,uBAArEA,sBAAA,CAAuE3C,MAAM,KAAI,SAAS;EAC9G,MAAM0D,SAAS,GAAG,EAAAd,sBAAA,GAAA9B,qBAAqB,CAAC,KAAK,CAAC,CAACR,QAAQ,CAAC0C,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACrE,EAAE,KAAKuD,SAAS,CAAC,cAAAG,sBAAA,uBAAnEA,sBAAA,CAAqE5C,MAAM,KAAI,SAAS;;EAE1G;EACA,OAAO;IACLkD,OAAO,EAAE,IAAI;IACbS,IAAI,EAAE;MACJ,GAAG/D,GAAG;MACN3B,YAAY,EAAEmF,mBAAmB;MACjCQ,WAAW,EAAE;QACX3B,GAAG,EAAEuB,SAAS;QACdtB,KAAK,EAAEuB,WAAW;QAClBtB,GAAG,EAAEuB;MACP;IACF;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMG,qBAAqB,GAAG,MAAOpB,SAAS,IAAK;EACxD;EACA,MAAM,IAAII,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,MAAMjB,OAAO,GAAG5D,YAAY,CAAC+E,IAAI,CAACO,CAAC,IAAIA,CAAC,CAACrE,EAAE,KAAKuD,SAAS,CAAC;EAC1D,IAAI,CAACZ,OAAO,EAAE;IACZ,OAAO;MAAEqB,OAAO,EAAE,KAAK;MAAE9D,KAAK,EAAE;IAAyB,CAAC;EAC5D;;EAEA;EACA,MAAM0E,aAAa,GAAGhG,qBAAqB,CAAC2E,SAAS,CAAC;EACtD,MAAMsB,kBAAkB,GAAGD,aAAa,CAACT,GAAG,CAAC7C,KAAK,IAAI;IACpD,MAAMZ,GAAG,GAAG5B,IAAI,CAACgF,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC/D,EAAE,KAAKsB,KAAK,CAAC,IAAI;MAAEtB,EAAE,EAAEsB,KAAK;MAAEiB,IAAI,EAAE;IAAc,CAAC;IAChF,OAAO7B,GAAG;EACZ,CAAC,CAAC;;EAEF;EACA,OAAO;IACLsD,OAAO,EAAE,IAAI;IACbS,IAAI,EAAE;MACJ,GAAG9B,OAAO;MACVmC,WAAW,EAAED;IACf;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAME,mBAAmB,GAAG,MAAAA,CAAOzD,KAAK,EAAE0D,cAAc,KAAK;EAClE;EACA,MAAM,IAAIrB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA;EACAzD,OAAO,CAAC8E,GAAG,CAAC,iCAAiC3D,KAAK,GAAG,EAAE0D,cAAc,CAAC;EAEtE,OAAO;IACLhB,OAAO,EAAE,IAAI;IACbS,IAAI,EAAE;MACJhD,OAAO,EAAE,sBAAsBH,KAAK,yBAAyB;MAC7DQ,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC;EACF,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMkD,UAAU,GAAG,MAAAA,CAAA,KAAY;EACpC;EACA,MAAM,IAAIvB,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,MAAMuB,OAAO,GAAG,CACd;IAAEnF,EAAE,EAAE,SAAS;IAAEuC,IAAI,EAAE,6BAA6B;IAAE6C,IAAI,EAAE,aAAa;IAAEtE,MAAM,EAAE;EAAa,CAAC,EACjG;IAAEd,EAAE,EAAE,SAAS;IAAEuC,IAAI,EAAE,wBAAwB;IAAE6C,IAAI,EAAE,iBAAiB;IAAEtE,MAAM,EAAE;EAAa,CAAC,EAChG;IAAEd,EAAE,EAAE,SAAS;IAAEuC,IAAI,EAAE,oBAAoB;IAAE6C,IAAI,EAAE,YAAY;IAAEtE,MAAM,EAAE;EAAa,CAAC,EACvF;IAAEd,EAAE,EAAE,SAAS;IAAEuC,IAAI,EAAE,yBAAyB;IAAE6C,IAAI,EAAE,YAAY;IAAEtE,MAAM,EAAE;EAAc,CAAC,EAC7F;IAAEd,EAAE,EAAE,SAAS;IAAEuC,IAAI,EAAE,4BAA4B;IAAE6C,IAAI,EAAE,aAAa;IAAEtE,MAAM,EAAE;EAAa,CAAC,CACjG;EAED,OAAO;IAAEkD,OAAO,EAAE,IAAI;IAAES,IAAI,EAAEU;EAAQ,CAAC;AACzC,CAAC;;AAED;AACA,OAAO,MAAME,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD;EACA,MAAM,IAAI3B,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;;EAEtD;EACA,MAAM2B,aAAa,GAAG;IACpBvF,EAAE,EAAEsF,QAAQ;IACZ/C,IAAI,EAAE+C,QAAQ,KAAK,SAAS,GAAG,6BAA6B,GACtDA,QAAQ,KAAK,SAAS,GAAG,wBAAwB,GACjDA,QAAQ,KAAK,SAAS,GAAG,oBAAoB,GAC7CA,QAAQ,KAAK,SAAS,GAAG,yBAAyB,GAClDA,QAAQ,KAAK,SAAS,GAAG,4BAA4B,GAAG,gBAAgB;IAC9E5C,WAAW,EAAE,+DAA+D;IAC5E8C,KAAK,EAAE,eAAe;IACtBC,eAAe,EAAE,sBAAsB;IACvCC,cAAc,EAAE,YAAY;IAC5BC,cAAc,EAAE,YAAY;IAC5BC,MAAM,EAAEN,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,SAAS,GAAG,MAAM,GACzDA,QAAQ,KAAK,SAAS,GAAG,UAAU,GAAG,KAAK;IACnDxE,MAAM,EAAEwE,QAAQ,KAAK,SAAS,GAAG,aAAa,GAAG,YAAY;IAC7DO,UAAU,EAAE,CACV;MAAEtD,IAAI,EAAE,sBAAsB;MAAE6C,IAAI,EAAE,KAAK;MAAEU,UAAU,EAAE,OAAO;MAAEC,eAAe,EAAE;IAAM,CAAC,EAC1F;MAAExD,IAAI,EAAE,aAAa;MAAE6C,IAAI,EAAE,SAAS;MAAEU,UAAU,EAAE,iBAAiB;MAAEC,eAAe,EAAE;IAAM,CAAC,EAC/F;MAAExD,IAAI,EAAE,kBAAkB;MAAE6C,IAAI,EAAE,SAAS;MAAEU,UAAU,EAAE,SAAS;MAAEC,eAAe,EAAE;IAAM,CAAC,EAC5F;MAAExD,IAAI,EAAE,UAAU;MAAE6C,IAAI,EAAE,UAAU;MAAEU,UAAU,EAAE,YAAY;MAAEC,eAAe,EAAE;IAAU,CAAC,CAC7F;IACDjH,IAAI,EAAEwG,QAAQ,KAAK,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,GACpHA,QAAQ,KAAK,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,CAAC,GAChFA,QAAQ,KAAK,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,GACpDA,QAAQ,KAAK,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,GAC3CA,QAAQ,KAAK,SAAS,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,GAAG,EAAE;IAC1FU,gBAAgB,EAAE;MAChBC,OAAO,EAAEX,QAAQ,KAAK,SAAS,GAAG,YAAY,GACtCA,QAAQ,KAAK,SAAS,GAAG,YAAY,GACrCA,QAAQ,KAAK,SAAS,GAAG,WAAW,GACpCA,QAAQ,KAAK,SAAS,GAAG,gBAAgB,GACzCA,QAAQ,KAAK,SAAS,GAAG,YAAY,GAAG,SAAS;MACzDY,KAAK,EAAEZ,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,SAAS,GAAG,MAAM,GACzDA,QAAQ,KAAK,SAAS,GAAG,UAAU,GACnCA,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,SAAS,GAAG,KAAK,GAAG,SAAS;MAC3Ea,KAAK,EAAEb,QAAQ,KAAK,SAAS,IAAIA,QAAQ,KAAK,SAAS,GAAG,WAAW,GAAG,gBAAgB;MACxFc,GAAG,EAAEd,QAAQ,KAAK,SAAS,GAAG,WAAW,GAAG;IAC9C;EACF,CAAC;EAED,OAAO;IAAEtB,OAAO,EAAE,IAAI;IAAES,IAAI,EAAEc;EAAc,CAAC;AAC/C,CAAC;AAED,SACEnF,qBAAqB,EACrBE,sBAAsB,EACtBe,yBAAyB,EACzBM,eAAe,EACfC,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}