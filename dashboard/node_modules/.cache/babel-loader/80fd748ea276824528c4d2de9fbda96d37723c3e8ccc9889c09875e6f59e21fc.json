{"ast":null,"code":"import axios from 'axios';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async provider => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  return {\n    aws: {\n      compliant: 15,\n      nonCompliant: 3,\n      notApplicable: 2,\n      controls: [{\n        id: \"AC-2\",\n        title: \"Account Management\",\n        status: \"implemented\",\n        evidence: \"IAM policies configured correctly\"\n      }, {\n        id: \"SC-13\",\n        title: \"Cryptographic Protection\",\n        status: \"implemented\",\n        evidence: \"KMS with FIPS 140-2 validated modules\"\n      }, {\n        id: \"CM-6\",\n        title: \"Configuration Settings\",\n        status: \"partial\",\n        evidence: \"Some settings need remediation\"\n      }]\n    },\n    azure: {\n      compliant: 14,\n      nonCompliant: 4,\n      notApplicable: 2,\n      controls: [{\n        id: \"AC-2\",\n        title: \"Account Management\",\n        status: \"implemented\",\n        evidence: \"Azure AD policies configured correctly\"\n      }, {\n        id: \"SC-13\",\n        title: \"Cryptographic Protection\",\n        status: \"implemented\",\n        evidence: \"Azure Key Vault with FIPS 140-2 validation\"\n      }, {\n        id: \"CM-6\",\n        title: \"Configuration Settings\",\n        status: \"not-implemented\",\n        evidence: \"Settings need remediation\"\n      }]\n    },\n    gcp: {\n      compliant: 12,\n      nonCompliant: 5,\n      notApplicable: 3,\n      controls: [{\n        id: \"AC-2\",\n        title: \"Account Management\",\n        status: \"implemented\",\n        evidence: \"IAM policies configured correctly\"\n      }, {\n        id: \"SC-13\",\n        title: \"Cryptographic Protection\",\n        status: \"implemented\",\n        evidence: \"Cloud KMS with FIPS 140-2 validation\"\n      }, {\n        id: \"CM-6\",\n        title: \"Configuration Settings\",\n        status: \"partial\",\n        evidence: \"Some settings need remediation\"\n      }]\n    }\n  };\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","getComplianceControls","response","get","data","error","console","getCloudProviderStatus","provider","getMockComplianceData","aws","compliant","nonCompliant","notApplicable","controls","id","title","status","evidence","azure","gcp"],"sources":["/Users/ryangutwein/Desktop/Repos/fedramp-ksi-validation/dashboard/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Base URL for the backend API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || '/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Get all compliance controls\nexport const getComplianceControls = async () => {\n  try {\n    const response = await api.get('/controls');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching compliance controls:', error);\n    throw error;\n  }\n};\n\n// Get compliance status for a specific cloud provider\nexport const getCloudProviderStatus = async (provider) => {\n  try {\n    const response = await api.get(`/status/${provider}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching ${provider} compliance status:`, error);\n    throw error;\n  }\n};\n\n// For development/demo, we can use this function to get mock data\nexport const getMockComplianceData = () => {\n  return {\n    aws: {\n      compliant: 15,\n      nonCompliant: 3,\n      notApplicable: 2,\n      controls: [\n        { id: \"AC-2\", title: \"Account Management\", status: \"implemented\", evidence: \"IAM policies configured correctly\" },\n        { id: \"SC-13\", title: \"Cryptographic Protection\", status: \"implemented\", evidence: \"KMS with FIPS 140-2 validated modules\" },\n        { id: \"CM-6\", title: \"Configuration Settings\", status: \"partial\", evidence: \"Some settings need remediation\" }\n      ]\n    },\n    azure: {\n      compliant: 14,\n      nonCompliant: 4,\n      notApplicable: 2,\n      controls: [\n        { id: \"AC-2\", title: \"Account Management\", status: \"implemented\", evidence: \"Azure AD policies configured correctly\" },\n        { id: \"SC-13\", title: \"Cryptographic Protection\", status: \"implemented\", evidence: \"Azure Key Vault with FIPS 140-2 validation\" },\n        { id: \"CM-6\", title: \"Configuration Settings\", status: \"not-implemented\", evidence: \"Settings need remediation\" }\n      ]\n    },\n    gcp: {\n      compliant: 12,\n      nonCompliant: 5,\n      notApplicable: 3,\n      controls: [\n        { id: \"AC-2\", title: \"Account Management\", status: \"implemented\", evidence: \"IAM policies configured correctly\" },\n        { id: \"SC-13\", title: \"Cryptographic Protection\", status: \"implemented\", evidence: \"Cloud KMS with FIPS 140-2 validation\" },\n        { id: \"CM-6\", title: \"Configuration Settings\", status: \"partial\", evidence: \"Some settings need remediation\" }\n      ]\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}